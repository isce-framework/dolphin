[build-system]
requires = ["setuptools>=64.0", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "dolphin"
description = "Workflows for generating surface displacement maps using InSAR"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.10"

dependencies = [
  "h5py>=3.6",
  "jax>=0.4.19",
  "numba>=0.56",
  "numpy>=1.23",
  "opera-utils>=0.16",
  "pydantic>=2.1",
  "pyproj>=3.3",
  "rasterio>=1.3",
  "ruamel_yaml>=0.15",
  "scipy>=1.9",
  "snaphu>=0.4.1",
  "threadpoolctl>=3.0",
  "tqdm>=4.60",
  "typing_extensions>=3.10",
  "tyro>=0.9.20",
]

classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3",
  "Operating System :: OS Independent",
]
license = { file = "LICENSE.txt" }

# The version will be written into a version.py upon install, auto-generated
# see section: setuptools_scm
# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#dynamic-metadata
# dependencies will be read from text files
dynamic = ["version"]

# extra requirements: `pip install dolphin[docs]` or `pip install .[docs]`
[project.optional-dependencies]
docs = [
  "markdown",
  "mkdocs",
  "mkdocs-gen-files",
  "mkdocs-jupyter==0.25.0",
  "mkdocs-literate-nav",
  "mkdocs-material",
  "mkdocs-section-index",
  "mkdocstrings",
  "pybtex",
  "pymdown-extensions",
]
test = [
  "asv",
  "black",
  "boto3",
  "moto[server]",
  "pooch",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest-randomly",
  "pytest-xdist",
  "shapely",
  "snaphu>=0.4.1",
  "spurt>=0.1.1",
  "ortools!=9.13.*",
  "xarray>=2025",
]
all = ["dolphin[test,docs]"]

# Pixi configuration
[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]
git = "*"
gdal = ">=3.3"
libgdal-netcdf = "*"
libgdal-hdf5 = "*"
h5py = ">=3.6"
hdf5 = "!=1.12.2"
jax = ">=0.4.19"
numba = ">=0.56"
numpy = ">=1.23"
opera-utils = ">=0.4.1"
pydantic = ">=2.1"
pyproj = ">=3.3"
rasterio = ">=1.3"
"ruamel.yaml" = ">=0.15"
scipy = ">=1.12"
threadpoolctl = ">=3.0"
tqdm = ">=4.60"
typing_extensions = ">=3.10"
tyro = ">=0.9.20"

# Like running pip install -e .
[tool.pixi.pypi-dependencies]
dolphin = { path = ".", editable = true }

[tool.pixi.tasks]
test = "python -m pytest"
check = "pre-commit run --all-files"

[tool.pixi.feature.test.dependencies]
isce3-cpu = "*"
dask = "*"

[tool.pixi.feature.test.pypi-dependencies]
tophu = { git = "https://github.com/scottstanie/tophu.git", rev = "303470c203bfddb59bf4debdecd1fd949d0c8d54" }

[tool.pixi.environments]
default = { features = [], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
all = { features = ["all", "docs", "test"], solve-group = "default" }

[project.urls]
Homepage = "https://github.com/isce-framework/dolphin"
"Bug Tracker" = "https://github.com/isce-framework/dolphin/issues"

# Entry points for the command line interface
[project.scripts]
dolphin = "dolphin.cli:main"


[tool.setuptools_scm]
# https://github.com/pypa/setuptools_scm#configuration-parameters
write_to = "src/dolphin/_version.py"
# https://github.com/pypa/setuptools_scm#version-number-construction
version_scheme = "no-guess-dev" # Will not guess the next version

[tool.ruff]
src = ["src"]       # For known-first-party imports
unsafe-fixes = true

[tool.ruff.lint]
select = [
  "A",   # flake8-builtins
  "ARG", # flake8-unused-arguments
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",   # pydocstyle
  "E",   # pycodestyle (errors)
  "W",   # pycodestyle (warnings)
  # "EM",  # flake8-errmsg
  "EXE",    # flake8-executable
  "F",      # Pyflakes
  "I",      # isort
  "ISC",    # flake8-implicit-str-concat
  "N",      # pep8-naming
  "NPY201", # numpy 2.0 depgrcations
  "PGH",    # pygrep-hooks
  "PIE",    # flake8-pie
  "PL",     # Pylint
  # "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RUF", # Ruff-specific rules
  "SIM", # flake8-simplify
  "TRY", # tryceratops
  # "UP",  # pyupgrade  <- not working with Pydantic lower python versions
  "YTT", # flake8-2020
]

ignore = [
  "D100",   # Missing docstring in public module
  "D104",   # Missing docstring in public package
  "D105",   # Missing docstring in magic method
  "D203",   # 1 blank line required before class docstring
  "D213",   # Multi-line docstring summary should start at the second line
  "N803",   # Argument name should be lowercase
  "N806",   # Variable _ in function should be lowercase
  "PIE796", # Non-unique values are redundant and likely a mistake.
  "PLR",    # Pylint Refactor
  "PTH123", # `open()` should be replaced by `Path.open()`
  "PTH207", # "Replace `glob` with `Path.glob` or `Path.rglob`
  "ISC001", # The following rules may cause conflicts when used with the formatter
  "TRY003", # Avoid specifying long messages outside the exception
]

exclude = ["scripts"]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401", "F403"]
"tests/**" = ["D", "N", "PTH"]
"benchmarks/**" = ["D", "N", "PTH", "RUF", "ARG002"]
"docs/mdx_bib.py" = ["ALL"]                          # ignore the vendored code

[tool.ruff.lint.flake8-unused-arguments]
# Whether to allow unused variadic arguments, like *args and **kwargs.
ignore-variadic-names = true

[tool.black]
preview = true

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
plugins = ["pydantic.mypy"]


[tool.pytest.ini_options]
doctest_optionflags = "NORMALIZE_WHITESPACE NUMBER"
# addopts = "  --cov=dolphin  -n auto --maxprocesses=8 --doctest-modules --randomly-seed=1234 --ignore=scripts --ignore=docs --ignore=data --ignore=pkgs"
addopts = " --cov=dolphin --doctest-modules --randomly-seed=1234 --ignore=scripts --ignore=benchmarks --ignore=docs --ignore=data --ignore=pkgs"
filterwarnings = [
  "error",
  # DeprecationWarning thrown in pkg_resources for older numba versions and llvmlite
  "ignore:.*pkg_resources.*",
  # remove after https://github.com/conda-forge/h5py-feedstock/issues/122 is solved:
  "ignore:h5py is running against HDF5.*:UserWarning",
  # DeprecationWarning: ast.Str
  "ignore:ast.Str is deprecated.*:DeprecationWarning",
]
